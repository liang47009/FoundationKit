#ifdef WIN32
#if 0

#include <windows.h>
#include "KeyboardExampleWindows.h"
#include "EventKeyboard.h"
#include <WindowsX.h>
USING_NS_FK;

static EventKeyboard::KeyCode getKey(WPARAM win32KeyCode, bool shiftDown)
{
    switch (win32KeyCode)
    {
    case VK_PAUSE:
        return EventKeyboard::KeyCode::KEY_PAUSE;
    case VK_SCROLL:
        return EventKeyboard::KeyCode::KEY_SCROLL_LOCK;
    case VK_PRINT:
        return EventKeyboard::KeyCode::KEY_PRINT;
    case VK_ESCAPE:
        return EventKeyboard::KeyCode::KEY_ESCAPE;
    case VK_BACK:
    case VK_F16: // generated by CTRL + BACKSPACE
        return EventKeyboard::KeyCode::KEY_BACKSPACE;
    case VK_TAB:
        return shiftDown ? EventKeyboard::KeyCode::KEY_BACK_TAB : EventKeyboard::KeyCode::KEY_TAB;
    case VK_RETURN:
        return EventKeyboard::KeyCode::KEY_RETURN;
    case VK_CAPITAL:
        return EventKeyboard::KeyCode::KEY_CAPS_LOCK;
    case VK_SHIFT:
        return EventKeyboard::KeyCode::KEY_SHIFT;
    case VK_CONTROL:
        return EventKeyboard::KeyCode::KEY_CTRL;
    case VK_MENU:
        return EventKeyboard::KeyCode::KEY_ALT;
    case VK_APPS:
        return EventKeyboard::KeyCode::KEY_MENU;
    case VK_LSHIFT:
        return EventKeyboard::KeyCode::KEY_SHIFT;
    case VK_RSHIFT:
        return EventKeyboard::KeyCode::KEY_SHIFT;
    case VK_LCONTROL:
        return EventKeyboard::KeyCode::KEY_CTRL;
    case VK_RCONTROL:
        return EventKeyboard::KeyCode::KEY_CTRL;
    case VK_LMENU:
        return EventKeyboard::KeyCode::KEY_ALT;
    case VK_RMENU:
        return EventKeyboard::KeyCode::KEY_ALT;
    case VK_LWIN:
    case VK_RWIN:
        return EventKeyboard::KeyCode::KEY_HYPER;
    case VK_BROWSER_SEARCH:
        return EventKeyboard::KeyCode::KEY_SEARCH;
    case VK_INSERT:
        return EventKeyboard::KeyCode::KEY_INSERT;
    case VK_HOME:
        return EventKeyboard::KeyCode::KEY_HOME;
    case VK_PRIOR:
        return EventKeyboard::KeyCode::KEY_PG_UP;
    case VK_DELETE:
        return EventKeyboard::KeyCode::KEY_DELETE;
    case VK_END:
        return EventKeyboard::KeyCode::KEY_END;
    case VK_NEXT:
        return EventKeyboard::KeyCode::KEY_PG_DOWN;
    case VK_LEFT:
        return EventKeyboard::KeyCode::KEY_LEFT_ARROW;
    case VK_RIGHT:
        return EventKeyboard::KeyCode::KEY_RIGHT_ARROW;
    case VK_UP:
        return EventKeyboard::KeyCode::KEY_UP_ARROW;
    case VK_DOWN:
        return EventKeyboard::KeyCode::KEY_DOWN_ARROW;
    case VK_NUMLOCK:
        return EventKeyboard::KeyCode::KEY_NUM_LOCK;
    case VK_ADD:
        return EventKeyboard::KeyCode::KEY_KP_PLUS;
    case VK_SUBTRACT:
        return EventKeyboard::KeyCode::KEY_KP_MINUS;
    case VK_MULTIPLY:
        return EventKeyboard::KeyCode::KEY_KP_MULTIPLY;
    case VK_DIVIDE:
        return EventKeyboard::KeyCode::KEY_KP_DIVIDE;
    case VK_NUMPAD7:
        return EventKeyboard::KeyCode::KEY_KP_HOME;
    case VK_NUMPAD8:
        return EventKeyboard::KeyCode::KEY_KP_UP;
    case VK_NUMPAD9:
        return EventKeyboard::KeyCode::KEY_KP_PG_UP;
    case VK_NUMPAD4:
        return EventKeyboard::KeyCode::KEY_KP_LEFT;
    case VK_NUMPAD5:
        return EventKeyboard::KeyCode::KEY_KP_FIVE;
    case VK_NUMPAD6:
        return EventKeyboard::KeyCode::KEY_KP_RIGHT;
    case VK_NUMPAD1:
        return EventKeyboard::KeyCode::KEY_KP_END;
    case VK_NUMPAD2:
        return EventKeyboard::KeyCode::KEY_KP_DOWN;
    case VK_NUMPAD3:
        return EventKeyboard::KeyCode::KEY_KP_PG_DOWN;
    case VK_NUMPAD0:
        return EventKeyboard::KeyCode::KEY_KP_INSERT;
    case VK_DECIMAL:
        return EventKeyboard::KeyCode::KEY_KP_DELETE;
    case VK_F1:
        return EventKeyboard::KeyCode::KEY_F1;
    case VK_F2:
        return EventKeyboard::KeyCode::KEY_F2;
    case VK_F3:
        return EventKeyboard::KeyCode::KEY_F3;
    case VK_F4:
        return EventKeyboard::KeyCode::KEY_F4;
    case VK_F5:
        return EventKeyboard::KeyCode::KEY_F5;
    case VK_F6:
        return EventKeyboard::KeyCode::KEY_F6;
    case VK_F7:
        return EventKeyboard::KeyCode::KEY_F7;
    case VK_F8:
        return EventKeyboard::KeyCode::KEY_F8;
    case VK_F9:
        return EventKeyboard::KeyCode::KEY_F9;
    case VK_F10:
        return EventKeyboard::KeyCode::KEY_F10;
    case VK_F11:
        return EventKeyboard::KeyCode::KEY_F11;
    case VK_F12:
        return EventKeyboard::KeyCode::KEY_F12;
    case VK_SPACE:
        return EventKeyboard::KeyCode::KEY_SPACE;
    case 0x30:
        return shiftDown ? EventKeyboard::KeyCode::KEY_RIGHT_PARENTHESIS : EventKeyboard::KeyCode::KEY_0;
    case 0x31:
        return shiftDown ? EventKeyboard::KeyCode::KEY_EXCLAM : EventKeyboard::KeyCode::KEY_1;
    case 0x32:
        return shiftDown ? EventKeyboard::KeyCode::KEY_AT : EventKeyboard::KeyCode::KEY_2;
    case 0x33:
        return shiftDown ? EventKeyboard::KeyCode::KEY_NUMBER : EventKeyboard::KeyCode::KEY_3;
    case 0x34:
        return shiftDown ? EventKeyboard::KeyCode::KEY_DOLLAR : EventKeyboard::KeyCode::KEY_4;
    case 0x35:
        return shiftDown ? EventKeyboard::KeyCode::KEY_PERCENT : EventKeyboard::KeyCode::KEY_5;
    case 0x36:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CIRCUMFLEX : EventKeyboard::KeyCode::KEY_6;
    case 0x37:
        return shiftDown ? EventKeyboard::KeyCode::KEY_AMPERSAND : EventKeyboard::KeyCode::KEY_7;
    case 0x38:
        return shiftDown ? EventKeyboard::KeyCode::KEY_ASTERISK : EventKeyboard::KeyCode::KEY_8;
    case 0x39:
        return shiftDown ? EventKeyboard::KeyCode::KEY_LEFT_PARENTHESIS : EventKeyboard::KeyCode::KEY_9;
    case VK_OEM_PLUS:
        return shiftDown ? EventKeyboard::KeyCode::KEY_EQUAL : EventKeyboard::KeyCode::KEY_PLUS;
    case VK_OEM_COMMA:
        return shiftDown ? EventKeyboard::KeyCode::KEY_LESS_THAN : EventKeyboard::KeyCode::KEY_COMMA;
    case VK_OEM_MINUS:
        return shiftDown ? EventKeyboard::KeyCode::KEY_UNDERSCORE : EventKeyboard::KeyCode::KEY_MINUS;
    case VK_OEM_PERIOD:
        return shiftDown ? EventKeyboard::KeyCode::KEY_GREATER_THAN : EventKeyboard::KeyCode::KEY_PERIOD;
    case VK_OEM_1:
        return shiftDown ? EventKeyboard::KeyCode::KEY_COLON : EventKeyboard::KeyCode::KEY_SEMICOLON;
    case VK_OEM_2:
        return shiftDown ? EventKeyboard::KeyCode::KEY_QUESTION : EventKeyboard::KeyCode::KEY_SLASH;
    case VK_OEM_3:
        return shiftDown ? EventKeyboard::KeyCode::KEY_TILDE : EventKeyboard::KeyCode::KEY_GRAVE;
    case VK_OEM_4:
        return shiftDown ? EventKeyboard::KeyCode::KEY_LEFT_BRACE : EventKeyboard::KeyCode::KEY_LEFT_BRACKET;
    case VK_OEM_5:
        return shiftDown ? EventKeyboard::KeyCode::KEY_BAR : EventKeyboard::KeyCode::KEY_BACK_SLASH;
    case VK_OEM_6:
        return shiftDown ? EventKeyboard::KeyCode::KEY_RIGHT_BRACE : EventKeyboard::KeyCode::KEY_RIGHT_BRACKET;
    case VK_OEM_7:
        return shiftDown ? EventKeyboard::KeyCode::KEY_QUOTE : EventKeyboard::KeyCode::KEY_APOSTROPHE;
    case 0x41:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_A : EventKeyboard::KeyCode::KEY_A;
    case 0x42:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_B : EventKeyboard::KeyCode::KEY_B;
    case 0x43:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_C : EventKeyboard::KeyCode::KEY_C;
    case 0x44:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_D : EventKeyboard::KeyCode::KEY_D;
    case 0x45:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_E : EventKeyboard::KeyCode::KEY_E;
    case 0x46:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_F : EventKeyboard::KeyCode::KEY_F;
    case 0x47:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_G : EventKeyboard::KeyCode::KEY_G;
    case 0x48:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_H : EventKeyboard::KeyCode::KEY_H;
    case 0x49:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_I : EventKeyboard::KeyCode::KEY_I;
    case 0x4A:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_J : EventKeyboard::KeyCode::KEY_J;
    case 0x4B:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_K : EventKeyboard::KeyCode::KEY_K;
    case 0x4C:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_L : EventKeyboard::KeyCode::KEY_L;
    case 0x4D:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_M : EventKeyboard::KeyCode::KEY_M;
    case 0x4E:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_N : EventKeyboard::KeyCode::KEY_N;
    case 0x4F:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_O : EventKeyboard::KeyCode::KEY_O;
    case 0x50:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_P : EventKeyboard::KeyCode::KEY_P;
    case 0x51:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_Q : EventKeyboard::KeyCode::KEY_Q;
    case 0x52:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_R : EventKeyboard::KeyCode::KEY_R;
    case 0x53:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_S : EventKeyboard::KeyCode::KEY_S;
    case 0x54:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_T : EventKeyboard::KeyCode::KEY_T;
    case 0x55:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_U : EventKeyboard::KeyCode::KEY_U;
    case 0x56:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_V : EventKeyboard::KeyCode::KEY_V;
    case 0x57:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_W : EventKeyboard::KeyCode::KEY_W;
    case 0x58:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_X : EventKeyboard::KeyCode::KEY_X;
    case 0x59:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_Y : EventKeyboard::KeyCode::KEY_Y;
    case 0x5A:
        return shiftDown ? EventKeyboard::KeyCode::KEY_CAPITAL_Z : EventKeyboard::KeyCode::KEY_Z;
    default:
        return EventKeyboard::KeyCode::KEY_NONE;
    }
}

LRESULT CALLBACK __WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    static bool shiftDown = false;
    static bool capsOn = false;

    switch (msg)
    {
    case WM_CLOSE:
        return 0;

    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    case WM_LBUTTONDOWN:
    {
        int x = GET_X_LPARAM(lParam);
        int y = GET_Y_LPARAM(lParam);
        return 0;
    }
    case WM_LBUTTONUP:
    {
        int x = GET_X_LPARAM(lParam);
        int y = GET_Y_LPARAM(lParam);
        return 0;
    }
    case WM_RBUTTONDOWN:
        break;

    case WM_RBUTTONUP:
        break;

    case WM_MBUTTONDOWN:
        break;

    case WM_MBUTTONUP:
        break;

    case WM_MOUSEMOVE:
    {
        int x = GET_X_LPARAM(lParam);
        int y = GET_Y_LPARAM(lParam);
        break;
    }

    case WM_MOUSEWHEEL:
        break;

    case WM_KEYDOWN:
        if (wParam == VK_SHIFT || wParam == VK_LSHIFT || wParam == VK_RSHIFT)
            shiftDown = true;

        if (wParam == VK_CAPITAL)
            capsOn = !capsOn;

        //Platform::keyEventInternal(EventKeyboard::KeyEvent::KEY_PRESS, getKey(wParam, shiftDown ^ capsOn));
        break;

    case WM_KEYUP:
        if (wParam == VK_SHIFT || wParam == VK_LSHIFT || wParam == VK_RSHIFT)
            shiftDown = false;

        //Platform::keyEventInternal(EventKeyboard::KeyEvent::KEY_RELEASE, getKey(wParam, shiftDown ^ capsOn));
        break;

    case WM_CHAR:
        //Platform::keyEventInternal(EventKeyboard::KeyEvent::KEY_CHAR, wParam);
        break;

    case WM_UNICHAR:
        //Platform::keyEventInternal(EventKeyboard::KeyEvent::KEY_CHAR, wParam);
        break;

    case WM_SETFOCUS:
        break;

    case WM_KILLFOCUS:
        break;

    case WM_SIZE:
        break;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
}
#endif  //#if 0
#endif